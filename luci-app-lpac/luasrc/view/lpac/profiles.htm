<%#
    Copyright 2025 KilimcininKorOglu
    https://github.com/KilimcininKorOglu/luci-lpac-ui
    Licensed under the MIT License
-%>

<%+header%>

<!-- jsQR library for QR code scanning -->
<script src="<%=resource%>/jsQR.min.js"></script>

<style>
/* OpenWrt dark mode compatible styles - using data-bs-theme attribute */
.lpac-container {
    max-width: 1200px;
    margin: 0 auto;
}
.lpac-section {
    background: #fff;
    padding: 20px;
    margin-bottom: 20px;
    border-radius: 4px;
    border: 1px solid rgba(0,0,0,0.1);
}
/* Dark mode overrides - using prefers-color-scheme with higher specificity */
@media (prefers-color-scheme: dark) {
    body .lpac-section {
        background: #212529 !important;
        border-color: rgba(255,255,255,0.1) !important;
    }
}
.lpac-input {
    width: 100%;
    max-width: 600px;
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 3px;
    font-size: 14px;
    background: #fff;
    color: #000;
}
@media (prefers-color-scheme: dark) {
    body .lpac-input {
        background: #2b3035 !important;
        color: #fff !important;
        border-color: #495057 !important;
    }
}
.lpac-button {
    padding: 10px 20px;
    font-size: 14px;
    border: none;
    border-radius: 3px;
    cursor: pointer;
    transition: background 0.3s;
}
.lpac-button-primary {
    background: #0088cc;
    color: #fff;
}
.lpac-button-primary:hover {
    background: #006ba3;
}
.lpac-button-danger {
    background: #dc3545;
    color: #fff;
}
.lpac-button-danger:hover {
    background: #c82333;
}
.lpac-button-secondary {
    background: #6c757d;
    color: #fff;
}
.lpac-button-secondary:hover {
    background: #5a6268;
}
.lpac-status {
    padding: 10px;
    margin-top: 10px;
    border-radius: 3px;
    display: none;
}
.lpac-status.success {
    background: var(--success-bg, #d4edda);
    border: 1px solid var(--success-border, #c3e6cb);
    color: var(--success-text, #155724);
    display: block;
}
.lpac-status.error {
    background: var(--danger-bg, #f8d7da);
    border: 1px solid var(--danger-border, #f5c6cb);
    color: var(--danger-text, #721c24);
    display: block;
}
.lpac-status.info {
    background: var(--info-bg, #d1ecf1);
    border: 1px solid var(--info-border, #bee5eb);
    color: var(--info-text, #0c5460);
    display: block;
}
.lpac-progress {
    width: 100%;
    height: 30px;
    background: var(--progress-bg, #e9ecef);
    border-radius: 3px;
    overflow: hidden;
    margin-top: 10px;
    display: none;
}
.lpac-progress-bar {
    height: 100%;
    background: var(--primary, #0088cc);
    color: #fff;
    text-align: center;
    line-height: 30px;
    transition: width 0.3s;
    width: 0%;
}
.lpac-output {
    margin-top: 10px;
    padding: 10px;
    background: #f5f5f5;
    border: 1px solid #ddd;
    border-radius: 3px;
    font-family: monospace;
    font-size: 12px;
    white-space: pre-wrap;
    max-height: 300px;
    overflow-y: auto;
    display: none;
    color: #000;
}
@media (prefers-color-scheme: dark) {
    body .lpac-output {
        background: #1a1d20 !important;
        border-color: #495057 !important;
        color: #f8f9fa !important;
    }
    body .lpac-form-label {
        color: #f8f9fa !important;
    }
    body .lpac-form-hint {
        color: #adb5bd !important;
    }
    body .lpac-select {
        background: #2b3035 !important;
        color: #fff !important;
        border-color: #495057 !important;
    }
    body .lpac-button-primary {
        background: #0d6efd !important;
    }
    body .lpac-button-primary:hover {
        background: #0b5ed7 !important;
    }
    body .lpac-button-danger {
        background: #dc3545 !important;
    }
    body .lpac-button-danger:hover {
        background: #bb2d3b !important;
    }
    body .lpac-button-secondary {
        background: #6c757d !important;
    }
    body .lpac-button-secondary:hover {
        background: #5c636a !important;
    }
    body .lpac-progress {
        background: #343a40 !important;
    }
    body .lpac-progress-bar {
        background: #0d6efd !important;
    }
    /* Table styles for dark mode */
    body #profiles_table {
        border-color: #495057 !important;
    }
    body #profiles_table thead tr {
        background: #343a40 !important;
    }
    body #profiles_table th {
        border-color: #495057 !important;
        color: #f8f9fa !important;
    }
    body #profiles_table td {
        border-color: #495057 !important;
        color: #f8f9fa !important;
    }
    body #profiles_table tbody tr:hover {
        background: rgba(255, 255, 255, 0.05) !important;
    }
}
/* Table base styles */
#profiles_table {
    width: 100%;
    border-collapse: collapse;
    border: 1px solid #ddd;
}
#profiles_table thead tr {
    background: #f5f5f5;
}
#profiles_table th {
    padding: 10px;
    border: 1px solid #ddd;
    text-align: left;
    color: #333;
}
#profiles_table td {
    padding: 10px;
    border: 1px solid #ddd;
}
#profiles_table tbody tr:hover {
    background: #f9f9f9;
}
.lpac-form-group {
    margin-bottom: 15px;
}
.lpac-form-label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
    color: #333;
}
.lpac-form-hint {
    display: block;
    margin-top: 5px;
    font-size: 12px;
    color: #6c757d;
}
.lpac-select {
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 3px;
    font-size: 14px;
    background: #fff;
    color: #000;
}
</style>

<div class="lpac-container">
    <h2><%:eSIM Profile Management (LPAC)%></h2>
    <p><%:Manage eSIM profiles on Quectel modems using LPA (Local Profile Assistant)%></p>

    <!-- QMI/MBIM Driver Warning -->
    <div id="driver_warning" class="alert-message warning" style="display:none; margin-bottom: 20px; padding: 10px; background-color: #fff3cd; border: 1px solid #ffc107; border-radius: 4px;">
        <strong>‚ö† Warning:</strong> <span id="driver_warning_text"></span>
    </div>

    <!-- Installed Profiles Section -->
    <div class="lpac-section">
        <h3><%:Installed Profiles%></h3>

        <div class="lpac-form-group">
            <button class="lpac-button lpac-button-secondary" onclick="listProfiles()">
                <%:Refresh Profile List%>
            </button>
        </div>

        <div id="profiles_list_container" style="margin-top: 15px; display: none;">
            <table id="profiles_table">
                <thead>
                    <tr>
                        <th><%:ICCID%></th>
                        <th><%:Alias%></th>
                        <th><%:Status%></th>
                        <th><%:Actions%></th>
                    </tr>
                </thead>
                <tbody id="profiles_tbody">
                    <!-- Profiles will be inserted here -->
                </tbody>
            </table>
        </div>

        <div id="profiles_status" class="lpac-status"></div>
        <div id="profiles_output" class="lpac-output"></div>
    </div>

    <!-- Add Profile Section -->
    <div class="lpac-section">
        <h3><%:Add New eSIM Profile%></h3>

        <!-- Input Mode Toggle -->
        <div class="lpac-form-group">
            <label class="lpac-form-label"><%:Input Method%></label>
            <div style="display: flex; gap: 15px; margin-bottom: 10px;">
                <label style="display: flex; align-items: center; cursor: pointer;">
                    <input type="radio" name="input_mode" value="qr" checked onchange="toggleInputMode()" style="margin-right: 5px;">
                    <span><%:QR Code / Activation Code%></span>
                </label>
                <label style="display: flex; align-items: center; cursor: pointer;">
                    <input type="radio" name="input_mode" value="manual" onchange="toggleInputMode()" style="margin-right: 5px;">
                    <span><%:Manual (SM-DP+ + Matching ID)%></span>
                </label>
            </div>
        </div>

        <!-- QR Code / Activation Code Input (default) -->
        <div id="qr_mode_inputs">
            <div class="lpac-form-group">
                <label class="lpac-form-label" for="activation_code"><%:Activation Code%></label>
                <input type="text"
                       id="activation_code"
                       class="lpac-input"
                       placeholder="LPA:1$smdp.example.com$ACTIVATION_CODE"
                       autocomplete="off"/>
                <span class="lpac-form-hint">
                    <%:Format: LPA:1$SM-DP+_ADDRESS$ACTIVATION_CODE%>
                </span>
            </div>

            <!-- QR Code Scanning Options -->
            <div class="lpac-form-group">
                <label class="lpac-form-label"><%:Or scan QR code:%></label>
                <div style="display: flex; gap: 10px; flex-wrap: wrap;">
                    <!-- File Upload Button -->
                    <label class="lpac-button lpac-button-secondary" for="qr_file_input" style="cursor: pointer; display: inline-flex; align-items: center; gap: 5px;">
                        <span>üìÅ</span>
                        <span><%:Upload QR Image%></span>
                    </label>
                    <input type="file"
                           id="qr_file_input"
                           accept="image/*"
                           style="display: none;"
                           onchange="decodeQRFromFile(this)"/>

                    <!-- Webcam Scan Button -->
                    <button type="button"
                            class="lpac-button lpac-button-secondary"
                            onclick="startWebcamScan()"
                            style="display: inline-flex; align-items: center; gap: 5px;">
                        <span>üì∑</span>
                        <span><%:Scan with Camera%></span>
                    </button>
                </div>
                <span class="lpac-form-hint">
                    <%:Upload a QR code image or use your camera to scan it%>
                </span>
            </div>

            <!-- Webcam Video Element (hidden by default) -->
            <div id="webcam_container" style="display: none; margin-top: 15px;">
                <video id="webcam_video"
                       style="width: 100%; max-width: 500px; border: 2px solid #ccc; border-radius: 4px;"
                       autoplay></video>
                <canvas id="webcam_canvas" style="display: none;"></canvas>
                <div style="margin-top: 10px;">
                    <button type="button"
                            class="lpac-button lpac-button-secondary"
                            onclick="stopWebcamScan()">
                        <%:Stop Camera%>
                    </button>
                    <span id="webcam_status" style="margin-left: 10px; color: #666;"></span>
                </div>
            </div>
        </div>

        <!-- Manual SM-DP+ + Matching ID Inputs (hidden by default) -->
        <div id="manual_mode_inputs" style="display: none;">
            <div class="lpac-form-group">
                <label class="lpac-form-label" for="smdp_address"><%:SM-DP+ Server Address%></label>
                <input type="text"
                       id="smdp_address"
                       class="lpac-input"
                       placeholder="rsp.truphone.com"
                       autocomplete="off"/>
                <span class="lpac-form-hint">
                    <%:SM-DP+ server domain (e.g., rsp.truphone.com)%>
                </span>
            </div>

            <div class="lpac-form-group">
                <label class="lpac-form-label" for="matching_id"><%:Matching ID%></label>
                <input type="text"
                       id="matching_id"
                       class="lpac-input"
                       placeholder="QR-G-5C-1LS-1W1Z9P7"
                       autocomplete="off"/>
                <span class="lpac-form-hint">
                    <%:Matching ID / AC Token (alphanumeric and dash only)%>
                </span>
            </div>
        </div>

        <div class="lpac-form-group">
            <label class="lpac-form-label" for="confirmation_code"><%:Confirmation Code%> (<%:optional%>)</label>
            <input type="text"
                   id="confirmation_code"
                   class="lpac-input"
                   style="max-width: 200px;"
                   placeholder="1234"
                   autocomplete="off"/>
            <span class="lpac-form-hint">
                <%:Enter confirmation code if required by your carrier%>
            </span>
        </div>

        <div class="lpac-form-group">
            <label class="lpac-form-label" for="imei"><%:IMEI%> (<%:optional%>)</label>
            <input type="text"
                   id="imei"
                   class="lpac-input"
                   style="max-width: 250px;"
                   placeholder="123456789012345"
                   maxlength="15"
                   autocomplete="off"/>
            <span class="lpac-form-hint">
                <%:Enter IMEI for push profiles, operator validation, or fraud prevention. Leave empty for standard activation codes.%>
            </span>
        </div>

        <div class="lpac-form-group">
            <button class="lpac-button lpac-button-primary" onclick="addProfile()">
                <%:Install Profile%>
            </button>
        </div>

        <div id="add_progress" class="lpac-progress">
            <div id="add_progress_bar" class="lpac-progress-bar">0%</div>
        </div>

        <div id="add_status" class="lpac-status"></div>
        <div id="add_output" class="lpac-output"></div>
    </div>

    <!-- Notifications Section - COMMENTED OUT -->
    <!--
    <div class="lpac-section">
        <h3><%:Pending Notifications%></h3>
        <p style="color: #666; font-size: 13px; margin-bottom: 15px;">
            <%:Notifications are automatically processed after profile operations. You can view and manually process pending notifications below.%>
        </p>

        <div class="lpac-form-group">
            <button class="lpac-button lpac-button-secondary" onclick="listNotifications()" style="margin-right: 10px;">
                <%:List Notifications%>
            </button>
            <button class="lpac-button lpac-button-primary" onclick="manualProcessNotifications()">
                <%:Process All Notifications%>
            </button>
        </div>

        <div id="notifications_status" class="lpac-status" style="display: none;"></div>

        <div id="notifications_list_container" style="margin-top: 15px; display: none;">
            <table class="lpac-table">
                <thead>
                    <tr>
                        <th style="width: 100px;"><%:Seq Number%></th>
                        <th style="width: 200px;"><%:Profile ICCID%></th>
                        <th style="width: 150px;"><%:Operation%></th>
                        <th><%:Address%></th>
                    </tr>
                </thead>
                <tbody id="notifications_tbody">
                </tbody>
            </table>
        </div>
    </div>
    -->

    <!-- Modem Device & Status Section -->
    <div class="lpac-section">
        <h3><%:Modem Device & Status%></h3>

        <div class="lpac-form-group">
            <button class="lpac-button lpac-button-secondary" onclick="detectDevices()" style="margin-right: 10px;">
                <%:Device Settings%>
            </button>
            <button class="lpac-button lpac-button-secondary" onclick="refreshStatus()" style="margin-right: 10px;">
                <%:Modem Info%>
            </button>
            <button class="lpac-button lpac-button-danger" onclick="restartModem()" style="margin-right: 10px;">
                <%:Restart Modem%>
            </button>
            <button class="lpac-button lpac-button-primary" onclick="reconnectNetwork()" style="margin-right: 10px; background: #28a745;">
                <%:Reconnect Network%>
            </button>
            <button class="lpac-button lpac-button-secondary" onclick="clearLock()" style="background: #ffc107; color: #000;">
                <%:Clear Lock%>
            </button>
        </div>

        <div id="device_selection_container" style="margin-top: 15px; display: none;">
            <div class="lpac-form-group">
                <label class="lpac-form-label"><%:APDU Driver%></label>
                <select id="driver_select" class="lpac-select" style="width: 100%; max-width: 400px;" onchange="updateDeviceInputs()">
                    <option value="at">AT (Standard) - Most Compatible, Works on All Modems</option>
                    <option value="at_csim">AT_CSIM (3x Faster) - Requires Modern Modem Support</option>
                    <option value="mbim">MBIM (USB Mobile Broadband Interface)</option>
                    <option value="qmi">QMI (Qualcomm MSM Interface)</option>
                    <option value="qmi_qrtr">QMI_QRTR (QMI over QRTR - For Embedded Modems)</option>
                    <option value="uqmi">uQMI (OpenWrt QMI Tool - Alternative to QMI)</option>
                </select>
                <span class="lpac-form-hint">
                    <%:AT: Use multi-step APDU (slow, reliable). AT_CSIM: Use direct APDU (fast, may fail on old modems). MBIM/QMI: Cannot share with network interface. QMI_QRTR: For built-in Qualcomm modems (no device file needed).%>
                </span>
            </div>

            <div class="lpac-form-group" id="at_device_group">
                <label class="lpac-form-label"><%:AT Serial Device%></label>
                <select id="at_device_select" class="lpac-select" style="width: 100%; max-width: 400px;">
                    <option value=""><%:-- Select AT Device --%></option>
                </select>
                <span class="lpac-form-hint">
                    <%:Select /dev/ttyUSB* or /dev/ttyACM* device for AT driver%>
                </span>
            </div>

            <div class="lpac-form-group" id="mbim_qmi_device_group" style="display: none;">
                <label class="lpac-form-label" id="mbim_qmi_device_label"><%:MBIM/QMI Device%></label>
                <select id="mbim_device_select" class="lpac-select" style="width: 100%; max-width: 400px;">
                    <option value=""><%:-- Select Device --%></option>
                </select>
                <span class="lpac-form-hint" id="mbim_qmi_device_hint">
                    <%:Select /dev/cdc-wdm* device for MBIM/QMI driver%>
                </span>
            </div>

            <div class="lpac-form-group">
                <label class="lpac-form-label"><%:HTTP Client%></label>
                <select id="http_client_select" class="lpac-select" style="width: 100%; max-width: 200px;">
                    <option value="curl">curl</option>
                    <option value="wget">wget</option>
                </select>
                <span class="lpac-form-hint">
                    <%:Select HTTP client for SM-DP+ communication%>
                </span>
            </div>

            <div class="lpac-form-group">
                <label class="lpac-form-label"><%:Driver Home Directory%></label>
                <input type="text" id="driver_home_input" class="lpac-input" placeholder="/usr/lib/lpac/driver" style="width: 100%; max-width: 400px;" />
                <span class="lpac-form-hint">
                    <%:Directory containing APDU/HTTP driver libraries (leave empty for default)%>
                </span>
            </div>

            <div class="lpac-form-group">
                <label class="lpac-form-label"><%:Custom ISD-R AID%> <span style="color: #999;">(<%:Advanced%>)</span></label>
                <input type="text" id="custom_isd_r_aid_input" class="lpac-input" placeholder="A0000005591010FFFFFFFF8900000100" style="width: 100%; max-width: 400px;" />
                <span class="lpac-form-hint">
                    <%:Custom ISD-R Application Identifier (leave empty for default). Only change if you know what you're doing.%>
                </span>
            </div>

            <div class="lpac-form-group">
                <button class="lpac-button lpac-button-primary" onclick="saveDeviceSettings()">
                    <%:Save Device Settings%>
                </button>
            </div>
        </div>

        <div id="device_status" class="lpac-status"></div>
        <div id="status_output" class="lpac-output"></div>
    </div>
</div>

<script>
// Global device settings (loaded from UCI on page load)
var selectedDriver = 'at';
var selectedAtDevice = '/dev/ttyUSB2';
var selectedMbimDevice = '/dev/cdc-wdm0';
var selectedHttpClient = 'curl';
var installedProfiles = []; // Cache for installed profiles

// Process all pending notifications (GSMA compliance)
// This is called automatically after profile operations (download, delete, enable, disable)
function processNotifications(callback) {
    XHR.post('<%=url("admin/network/lpac/process_notifications")%>', {
        driver: selectedDriver,
        at_device: selectedAtDevice,
        mbim_device: selectedMbimDevice,
        http_client: selectedHttpClient
    }, function(x, data) {
        // Silent processing - we don't need to show notification count to user
        // Just log it for debugging
        if (data.success && data.count > 0) {
            console.log('Processed ' + data.count + ' notification(s)');
        }
        // Always call callback, even if notifications failed
        if (callback) callback(data);
    });
}

// Load device settings from UCI
function loadDeviceSettings() {
    XHR.get('<%=url("admin/network/lpac/get_settings")%>', null, function(x, data) {
        if (data.success) {
            selectedDriver = data.driver || 'at';
            selectedAtDevice = data.at_device || '/dev/ttyUSB2';
            selectedMbimDevice = data.mbim_device || '/dev/cdc-wdm0';
            selectedHttpClient = data.http_client || 'curl';

            // Populate advanced settings fields
            var driverHomeInput = document.getElementById('driver_home_input');
            var customAidInput = document.getElementById('custom_isd_r_aid_input');
            if (driverHomeInput) {
                driverHomeInput.value = data.driver_home || '/usr/lib/lpac/driver';
            }
            if (customAidInput) {
                customAidInput.value = data.custom_isd_r_aid || '';
            }

            // Show warning if QMI/MBIM driver is selected
            showDriverWarning(selectedDriver);
        }
    });
}

// Show warning for QMI/MBIM drivers about network interface conflict
function showDriverWarning(driver) {
    var warningDiv = document.getElementById('driver_warning');
    var warningText = document.getElementById('driver_warning_text');

    if (driver === 'qmi' || driver === 'uqmi') {
        warningText.innerHTML = 'You are using QMI driver. <strong>QMI cannot be used simultaneously by network interface and eSIM management.</strong> If you have a network interface using this modem, operations will fail. <strong>Recommendation:</strong> Switch to AT driver in "Modem Device & Status" section below (use "Scan for Devices" button) for seamless operation.';
        warningDiv.style.display = 'block';
    } else if (driver === 'mbim') {
        warningText.innerHTML = 'You are using MBIM driver. <strong>MBIM cannot be used simultaneously by network interface and eSIM management.</strong> If you have a network interface using this modem, operations will fail. <strong>Recommendation:</strong> Switch to AT driver in "Modem Device & Status" section below (use "Scan for Devices" button) for seamless operation.';
        warningDiv.style.display = 'block';
    } else {
        warningDiv.style.display = 'none';
    }
}

// QR Code Decoding Functions
var webcamStream = null;
var webcamScanInterval = null;

// Decode QR code from uploaded file
function decodeQRFromFile(input) {
    const file = input.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = function(e) {
        const img = new Image();
        img.onload = function() {
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            canvas.width = img.width;
            canvas.height = img.height;
            ctx.drawImage(img, 0, 0);

            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
            const code = jsQR(imageData.data, canvas.width, canvas.height);

            if (code && code.data) {
                document.getElementById('activation_code').value = code.data;
                alert('‚úì QR code successfully decoded!');
            } else {
                alert('‚úó Could not read QR code. Please try a clearer image.');
            }

            // Reset file input
            input.value = '';
        };
        img.onerror = function() {
            alert('‚úó Error loading image file.');
            input.value = '';
        };
        img.src = e.target.result;
    };
    reader.onerror = function() {
        alert('‚úó Error reading file.');
        input.value = '';
    };
    reader.readAsDataURL(file);
}

// Start webcam scanning
function startWebcamScan() {
    const video = document.getElementById('webcam_video');
    const canvas = document.getElementById('webcam_canvas');
    const container = document.getElementById('webcam_container');
    const status = document.getElementById('webcam_status');

    container.style.display = 'block';
    status.textContent = 'Starting camera...';

    navigator.mediaDevices.getUserMedia({ video: { facingMode: 'environment' } })
        .then(function(stream) {
            webcamStream = stream;
            video.srcObject = stream;
            status.textContent = 'Scanning... Point camera at QR code';

            // Start scanning loop
            webcamScanInterval = setInterval(function() {
                if (video.readyState === video.HAVE_ENOUGH_DATA) {
                    canvas.width = video.videoWidth;
                    canvas.height = video.videoHeight;
                    const ctx = canvas.getContext('2d');
                    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

                    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
                    const code = jsQR(imageData.data, canvas.width, canvas.height);

                    if (code && code.data) {
                        document.getElementById('activation_code').value = code.data;
                        status.textContent = '‚úì QR code detected!';
                        alert('‚úì QR code successfully scanned!');
                        stopWebcamScan();
                    }
                }
            }, 250); // Scan every 250ms
        })
        .catch(function(err) {
            status.textContent = '‚úó Camera access denied';
            alert('‚úó Could not access camera: ' + err.message);
            container.style.display = 'none';
        });
}

// Stop webcam scanning
function stopWebcamScan() {
    if (webcamScanInterval) {
        clearInterval(webcamScanInterval);
        webcamScanInterval = null;
    }

    if (webcamStream) {
        webcamStream.getTracks().forEach(track => track.stop());
        webcamStream = null;
    }

    const video = document.getElementById('webcam_video');
    video.srcObject = null;

    const container = document.getElementById('webcam_container');
    container.style.display = 'none';
}

// Toggle between QR code and manual input mode
function toggleInputMode() {
    var inputMode = document.querySelector('input[name="input_mode"]:checked').value;
    var qrModeDiv = document.getElementById('qr_mode_inputs');
    var manualModeDiv = document.getElementById('manual_mode_inputs');

    if (inputMode === 'qr') {
        qrModeDiv.style.display = 'block';
        manualModeDiv.style.display = 'none';
    } else {
        qrModeDiv.style.display = 'none';
        manualModeDiv.style.display = 'block';
    }
}

// Update device input fields based on selected driver
function updateDeviceInputs() {
    var driverSelect = document.getElementById('driver_select');
    var atGroup = document.getElementById('at_device_group');
    var mbimQmiGroup = document.getElementById('mbim_qmi_device_group');
    var mbimQmiLabel = document.getElementById('mbim_qmi_device_label');
    var mbimQmiHint = document.getElementById('mbim_qmi_device_hint');

    var driver = driverSelect.value;

    if (driver === 'at' || driver === 'at_csim') {
        atGroup.style.display = 'block';
        mbimQmiGroup.style.display = 'none';
    } else if (driver === 'mbim') {
        atGroup.style.display = 'none';
        mbimQmiGroup.style.display = 'block';
        mbimQmiLabel.innerHTML = '<%:MBIM Device%>';
        mbimQmiHint.innerHTML = '<%:Select /dev/cdc-wdm* device for MBIM driver%>';
    } else if (driver === 'qmi' || driver === 'uqmi') {
        atGroup.style.display = 'none';
        mbimQmiGroup.style.display = 'block';
        mbimQmiLabel.innerHTML = '<%:QMI Device%>';
        mbimQmiHint.innerHTML = '<%:Select /dev/cdc-wdm* device for QMI driver%>';
    } else if (driver === 'qmi_qrtr') {
        atGroup.style.display = 'none';
        mbimQmiGroup.style.display = 'none';
    }
}

// Detect available modem devices
function detectDevices() {
    var statusDiv = document.getElementById('device_status');
    var selectionContainer = document.getElementById('device_selection_container');
    var driverSelect = document.getElementById('driver_select');
    var atSelect = document.getElementById('at_device_select');
    var mbimSelect = document.getElementById('mbim_device_select');
    var httpSelect = document.getElementById('http_client_select');

    statusDiv.className = 'lpac-status info';
    statusDiv.innerHTML = '<%:Scanning for modem devices...%>';
    selectionContainer.style.display = 'none';

    XHR.get('<%=url("admin/network/lpac/detect_devices")%>', null, function(x, data) {
        if (data.success) {
            // Clear existing options
            atSelect.innerHTML = '<option value=""><%:-- Select AT Device --%></option>';
            mbimSelect.innerHTML = '<option value=""><%:-- Select MBIM Device --%></option>';

            // Populate AT devices
            if (data.at_devices && data.at_devices.length > 0) {
                data.at_devices.forEach(function(device) {
                    var option = document.createElement('option');
                    option.value = device.path;
                    var accessibleText = device.accessible ? ' ‚úì' : ' ‚úó';
                    option.innerHTML = device.path + ' (' + device.name + ')' + accessibleText;
                    option.disabled = !device.accessible;
                    atSelect.appendChild(option);

                    // Auto-select if matches saved preference
                    if (device.path === selectedAtDevice) {
                        option.selected = true;
                    }
                });
            }

            // Populate MBIM devices
            if (data.mbim_devices && data.mbim_devices.length > 0) {
                data.mbim_devices.forEach(function(device) {
                    var option = document.createElement('option');
                    option.value = device.path;
                    var accessibleText = device.accessible ? ' ‚úì' : ' ‚úó';
                    option.innerHTML = device.path + ' (' + device.name + ')' + accessibleText;
                    option.disabled = !device.accessible;
                    mbimSelect.appendChild(option);

                    // Auto-select if matches saved preference
                    if (device.path === selectedMbimDevice) {
                        option.selected = true;
                    }
                });
            }

            // Set current driver
            driverSelect.value = selectedDriver;
            httpSelect.value = selectedHttpClient;
            updateDeviceInputs();

            // Show results
            selectionContainer.style.display = 'block';
            statusDiv.className = 'lpac-status success';
            statusDiv.innerHTML = '<strong>‚úì</strong> <%:Found%> ' + data.total_devices + ' <%:device(s)%><br>' +
                                 '<%:AT:%> ' + (data.at_devices ? data.at_devices.length : 0) + ' | ' +
                                 '<%:MBIM:%> ' + (data.mbim_devices ? data.mbim_devices.length : 0);
        } else {
            statusDiv.className = 'lpac-status error';
            statusDiv.innerHTML = '<strong>‚úó</strong> <%:Failed to detect devices%>';
        }
    });
}

// Save device settings to UCI
function saveDeviceSettings() {
    var driverSelect = document.getElementById('driver_select');
    var atSelect = document.getElementById('at_device_select');
    var mbimSelect = document.getElementById('mbim_device_select');
    var httpSelect = document.getElementById('http_client_select');
    var driverHomeInput = document.getElementById('driver_home_input');
    var customAidInput = document.getElementById('custom_isd_r_aid_input');
    var statusDiv = document.getElementById('device_status');

    selectedDriver = driverSelect.value || 'at';
    selectedAtDevice = atSelect.value || '/dev/ttyUSB2';
    selectedMbimDevice = mbimSelect.value || '/dev/cdc-wdm0';
    selectedHttpClient = httpSelect.value || 'curl';
    var driverHome = driverHomeInput ? (driverHomeInput.value || '/usr/lib/lpac/driver') : '/usr/lib/lpac/driver';
    var customAid = customAidInput ? customAidInput.value : '';

    statusDiv.className = 'lpac-status info';
    statusDiv.innerHTML = '<%:Saving device settings to UCI...%>';

    // Save to UCI via backend
    XHR.post('<%=url("admin/network/lpac/save_settings")%>', {
        driver: selectedDriver,
        at_device: selectedAtDevice,
        mbim_device: selectedMbimDevice,
        http_client: selectedHttpClient,
        driver_home: driverHome,
        custom_isd_r_aid: customAid
    }, function(x, data) {
        if (data.success) {
            statusDiv.className = 'lpac-status success';
            statusDiv.innerHTML = '<strong>‚úì</strong> ' + data.message + '<br>' +
                                 '<%:Driver:%> ' + data.driver + '<br>' +
                                 '<%:AT Device:%> ' + data.at_device + '<br>' +
                                 '<%:MBIM Device:%> ' + data.mbim_device + '<br>' +
                                 '<%:HTTP Client:%> ' + data.http_client + '<br>' +
                                 '<%:Driver Home:%> ' + data.driver_home + '<br>' +
                                 (data.custom_isd_r_aid ? '<%:Custom ISD-R AID:%> ' + data.custom_isd_r_aid + '<br>' : '') +
                                 '<br><em><%:Page will reload in 2 seconds...%></em>';

            // Reload page after 2 seconds to apply new settings
            setTimeout(function() {
                window.location.reload();
            }, 2000);
        } else {
            statusDiv.className = 'lpac-status error';
            statusDiv.innerHTML = '<strong>‚úó</strong> <%:Failed to save settings:%> ' + (data.error || '<%:Unknown error%>');
        }
    });
}

// Restart Modem (AT+CFUN soft reset)
function restartModem() {
    var statusDiv = document.getElementById('device_status');

    // Confirm action
    if (!confirm('<%:Are you sure you want to restart the modem? This will temporarily disconnect all connections.%>')) {
        return;
    }

    statusDiv.className = 'lpac-status info';
    statusDiv.innerHTML = '<%:Restarting modem (AT+CFUN=0/1), please wait 10-15 seconds...%>';

    // Send restart command
    XHR.post('<%=url("admin/network/lpac/restart_modem")%>', {
        driver: selectedDriver,
        at_device: selectedAtDevice,
        mbim_device: selectedMbimDevice
    }, function(x, data) {
        if (data.success) {
            statusDiv.className = 'lpac-status success';
            statusDiv.innerHTML = '<strong>‚úì</strong> <%:Modem restarted successfully%><br>' +
                                 '<em>' + (data.message || '<%:Modem is back online%>') + '</em>';
        } else {
            statusDiv.className = 'lpac-status error';
            statusDiv.innerHTML = '<strong>‚úó</strong> <%:Failed to restart modem:%> ' + (data.error || '<%:Unknown error%>');
        }
    });
}

// Reconnect network interface (restart QMI/WWAN)
function reconnectNetwork() {
    var statusDiv = document.getElementById('device_status');

    if (!confirm('<%:Reconnect network interface? This will temporarily disconnect internet.%>')) {
        return;
    }

    statusDiv.className = 'lpac-status info';
    statusDiv.innerHTML = '<%:Reconnecting network interface, please wait 20-30 seconds...%>';

    XHR.post('<%=url("admin/network/lpac/reconnect_network")%>', {}, function(x, data) {
        if (data.success) {
            statusDiv.className = 'lpac-status success';
            statusDiv.innerHTML = '<strong>‚úì</strong> ' + (data.message || '<%:Network reconnected successfully%>');
        } else {
            statusDiv.className = 'lpac-status error';
            statusDiv.innerHTML = '<strong>‚úó</strong> <%:Failed to reconnect network:%> ' + (data.error || '<%:Unknown error%>');
        }
    });
}

// Clear stale lock file manually
function clearLock() {
    var statusDiv = document.getElementById('device_status');

    // Confirm action
    if (!confirm('<%:Are you sure you want to clear the lock file? Only do this if an operation is stuck.%>')) {
        return;
    }

    statusDiv.className = 'lpac-status info';
    statusDiv.innerHTML = '<%:Clearing lock file...%>';

    // Send clear lock command
    XHR.post('<%=url("admin/network/lpac/clear_lock")%>', {}, function(x, data) {
        if (data.success) {
            statusDiv.className = 'lpac-status success';
            statusDiv.innerHTML = '<strong>‚úì</strong> ' + (data.message || '<%:Lock file cleared successfully%>');
        } else {
            statusDiv.className = 'lpac-status error';
            statusDiv.innerHTML = '<strong>‚úó</strong> <%:Failed to clear lock:%> ' + (data.error || '<%:Unknown error%>');
        }
    });
}

// Add eSIM Profile
function addProfile() {
    var inputMode = document.querySelector('input[name="input_mode"]:checked').value;
    var activation_code = '';
    var smdp_address = '';
    var matching_id = '';
    var confirmation_code = document.getElementById('confirmation_code').value.trim();
    var imei = document.getElementById('imei').value.trim();

    var statusDiv = document.getElementById('add_status');
    var outputDiv = document.getElementById('add_output');
    var progressDiv = document.getElementById('add_progress');
    var progressBar = document.getElementById('add_progress_bar');

    // Get input based on mode
    if (inputMode === 'qr') {
        activation_code = document.getElementById('activation_code').value.trim();

        // Validation for QR mode
        if (!activation_code || activation_code.length < 10) {
            statusDiv.className = 'lpac-status error';
            statusDiv.innerHTML = '<%:Please enter a valid activation code%>';
            return;
        }
    } else {
        // Manual mode
        smdp_address = document.getElementById('smdp_address').value.trim();
        matching_id = document.getElementById('matching_id').value.trim();

        // Validation for manual mode
        if (!smdp_address || smdp_address.length < 3) {
            statusDiv.className = 'lpac-status error';
            statusDiv.innerHTML = '<%:Please enter SM-DP+ server address%>';
            return;
        }

        if (!matching_id || matching_id.length < 3) {
            statusDiv.className = 'lpac-status error';
            statusDiv.innerHTML = '<%:Please enter Matching ID%>';
            return;
        }

        // Validate matching ID format (alphanumeric and dash only)
        if (!/^[a-zA-Z0-9-]+$/.test(matching_id)) {
            statusDiv.className = 'lpac-status error';
            statusDiv.innerHTML = '<%:Matching ID can only contain letters, numbers, and dashes%>';
            return;
        }
    }

    // IMEI validation (if provided)
    if (imei && (imei.length !== 15 || !/^\d+$/.test(imei))) {
        statusDiv.className = 'lpac-status error';
        statusDiv.innerHTML = '<%:IMEI must be exactly 15 digits%>';
        return;
    }

    // Reset UI
    statusDiv.className = 'lpac-status info';
    statusDiv.innerHTML = '<%:Installing profile, please wait (this may take 30-60 seconds)...%>';
    outputDiv.style.display = 'none';
    progressDiv.style.display = 'block';
    progressBar.style.width = '0%';
    progressBar.innerHTML = '0%';

    // Simulate progress (since we don't have real-time updates)
    var progress = 0;
    var progressInterval = setInterval(function() {
        if (progress < 90) {
            progress += 5;
            progressBar.style.width = progress + '%';
            progressBar.innerHTML = progress + '%';
        }
    }, 1000);

    // Make AJAX request with device parameters
    XHR.post('<%=url("admin/network/lpac/add")%>', {
        input_mode: inputMode,
        activation_code: activation_code,
        smdp_address: smdp_address,
        matching_id: matching_id,
        confirmation_code: confirmation_code,
        imei: imei,
        driver: selectedDriver,
        at_device: selectedAtDevice,
        mbim_device: selectedMbimDevice,
        http_client: selectedHttpClient
    }, function(x, data) {
        clearInterval(progressInterval);
        progressDiv.style.display = 'none';

        if (data.success) {
            // Profile installed - now process notifications (GSMA compliance)
            statusDiv.className = 'lpac-status info';
            statusDiv.innerHTML = '<strong>‚Üí</strong> <%:Profile installed, processing notifications...%>';

            processNotifications(function(notifData) {
                statusDiv.className = 'lpac-status success';
                statusDiv.innerHTML = '<strong>‚úì</strong> <%:Profile installed successfully!%>';

                // Clear form fields
                document.getElementById('activation_code').value = '';
                document.getElementById('smdp_address').value = '';
                document.getElementById('matching_id').value = '';
                document.getElementById('confirmation_code').value = '';
                document.getElementById('imei').value = '';

                // Refresh profile list after successful installation
                listProfiles();
            });
        } else {
            statusDiv.className = 'lpac-status error';
            statusDiv.innerHTML = '<strong>‚úó</strong> <%:Installation failed:%> ' + (data.error || '<%:Unknown error%>');
        }

        if (data.output || data.raw_output) {
            outputDiv.innerHTML = data.output || data.raw_output;
            outputDiv.style.display = 'block';
        }
    });
}

// Delete eSIM Profile
function deleteProfile(iccid, nickname) {
    if (!iccid) {
        alert('<%:Invalid ICCID%>');
        return;
    }

    var displayName = nickname ? (nickname + ' (' + iccid + ')') : iccid;
    if (!confirm('<%:Are you sure you want to delete profile:%> ' + displayName + '?')) {
        return;
    }

    var statusDiv = document.getElementById('profiles_status');
    var outputDiv = document.getElementById('profiles_output');

    statusDiv.className = 'lpac-status info';
    statusDiv.innerHTML = '<%:Deleting profile, please wait...%>';
    outputDiv.style.display = 'none';

    XHR.post('<%=url("admin/network/lpac/delete")%>', {
        iccid: iccid,
        driver: selectedDriver,
        at_device: selectedAtDevice,
        mbim_device: selectedMbimDevice,
        http_client: selectedHttpClient
    }, function(x, data) {
        if (data.success) {
            // Profile deleted - now process notifications (GSMA compliance)
            statusDiv.className = 'lpac-status info';
            statusDiv.innerHTML = '<strong>‚Üí</strong> <%:Profile deleted, processing notifications...%>';

            processNotifications(function(notifData) {
                statusDiv.className = 'lpac-status success';
                statusDiv.innerHTML = '<strong>‚úì</strong> <%:Profile deleted successfully!%>';
                // Refresh profile list to update delete dropdown
                listProfiles();
            });
        } else {
            statusDiv.className = 'lpac-status error';
            statusDiv.innerHTML = '<strong>‚úó</strong> <%:Deletion failed:%> ' + (data.error || '<%:Unknown error%>');
        }

        if (data.output || data.raw_output) {
            outputDiv.innerHTML = data.output || data.raw_output;
            outputDiv.style.display = 'block';
        }
    });
}

// Edit Nickname
function editNickname(iccid, currentNickname) {
    var newNickname = prompt('<%:Enter new alias for profile:%>\n' + iccid, currentNickname);

    if (newNickname === null) {
        // User cancelled
        return;
    }

    // Trim whitespace
    newNickname = newNickname.trim();

    XHR.post('<%=url("admin/network/lpac/set_nickname")%>', {
        iccid: iccid,
        nickname: newNickname,
        driver: selectedDriver,
        at_device: selectedAtDevice,
        mbim_device: selectedMbimDevice,
        http_client: selectedHttpClient
    }, function(x, data) {
        if (data.success) {
            // Refresh profile list to show updated nickname
            listProfiles();
        } else {
            alert('<%:Failed to update nickname:%> ' + (data.error || '<%:Unknown error%>'));
        }
    });
}

// Enable Profile
function enableProfile(iccid, nickname) {
    if (!iccid) {
        alert('<%:Invalid ICCID%>');
        return;
    }

    var displayName = nickname ? (nickname + ' (' + iccid + ')') : iccid;
    if (!confirm('<%:Enable profile:%> ' + displayName + '?')) {
        return;
    }

    var statusDiv = document.getElementById('profiles_status');
    statusDiv.className = 'lpac-status info';
    statusDiv.innerHTML = '<%:Enabling profile, please wait...%>';

    XHR.post('<%=url("admin/network/lpac/enable")%>', {
        iccid: iccid,
        driver: selectedDriver,
        at_device: selectedAtDevice,
        mbim_device: selectedMbimDevice,
        http_client: selectedHttpClient
    }, function(x, data) {
        if (data.success) {
            statusDiv.className = 'lpac-status info';
            statusDiv.innerHTML = '<strong>‚Üí</strong> <%:Profile enabled, processing notifications...%>';

            processNotifications(function(notifData) {
                statusDiv.className = 'lpac-status success';
                statusDiv.innerHTML = '<strong>‚úì</strong> <%:Profile enabled successfully!%>';
                listProfiles();
            });
        } else {
            statusDiv.className = 'lpac-status error';
            statusDiv.innerHTML = '<strong>‚úó</strong> <%:Enable failed:%> ' + (data.error || '<%:Unknown error%>');
        }
    });
}

// Disable Profile
function disableProfile(iccid, nickname) {
    if (!iccid) {
        alert('<%:Invalid ICCID%>');
        return;
    }

    var displayName = nickname ? (nickname + ' (' + iccid + ')') : iccid;
    if (!confirm('<%:Disable profile:%> ' + displayName + '?')) {
        return;
    }

    var statusDiv = document.getElementById('profiles_status');
    statusDiv.className = 'lpac-status info';
    statusDiv.innerHTML = '<%:Disabling profile, please wait...%>';

    XHR.post('<%=url("admin/network/lpac/disable")%>', {
        iccid: iccid,
        driver: selectedDriver,
        at_device: selectedAtDevice,
        mbim_device: selectedMbimDevice,
        http_client: selectedHttpClient
    }, function(x, data) {
        if (data.success) {
            statusDiv.className = 'lpac-status info';
            statusDiv.innerHTML = '<strong>‚Üí</strong> <%:Profile disabled, processing notifications...%>';

            processNotifications(function(notifData) {
                statusDiv.className = 'lpac-status success';
                statusDiv.innerHTML = '<strong>‚úì</strong> <%:Profile disabled successfully!%>';
                listProfiles();
            });
        } else {
            statusDiv.className = 'lpac-status error';
            statusDiv.innerHTML = '<strong>‚úó</strong> <%:Disable failed:%> ' + (data.error || '<%:Unknown error%>');
        }
    });
}

// List Pending Notifications - COMMENTED OUT
/*
function listNotifications() {
    var statusDiv = document.getElementById('notifications_status');
    var listContainer = document.getElementById('notifications_list_container');
    var tbody = document.getElementById('notifications_tbody');

    // Show loading status
    statusDiv.className = 'lpac-status info';
    statusDiv.innerHTML = '<%:Loading pending notifications...%>';
    statusDiv.style.display = 'block';
    listContainer.style.display = 'none';

    var url = '<%=url("admin/network/lpac/list_notifications")%>?' +
              'driver=' + encodeURIComponent(selectedDriver) +
              '&at_device=' + encodeURIComponent(selectedAtDevice) +
              '&mbim_device=' + encodeURIComponent(selectedMbimDevice) +
              '&http_client=' + encodeURIComponent(selectedHttpClient);

    XHR.get(url, null, function(x, data) {
        if (data.success && data.notifications && data.notifications.length > 0) {
            // Clear table
            tbody.innerHTML = '';

            // Populate table
            data.notifications.forEach(function(notif) {
                var row = tbody.insertRow();

                var cellSeq = row.insertCell(0);
                var cellIccid = row.insertCell(1);
                var cellOp = row.insertCell(2);
                var cellAddr = row.insertCell(3);

                cellSeq.innerHTML = notif.seqNumber || 'N/A';
                cellIccid.innerHTML = notif.profileManagementOperation?.iccid || 'N/A';

                // Operation type
                var opType = 'Unknown';
                if (notif.profileManagementOperation) {
                    if (notif.profileManagementOperation.notificationInstall) opType = 'Install';
                    else if (notif.profileManagementOperation.notificationEnable) opType = 'Enable';
                    else if (notif.profileManagementOperation.notificationDisable) opType = 'Disable';
                    else if (notif.profileManagementOperation.notificationDelete) opType = 'Delete';
                }
                cellOp.innerHTML = '<span style="font-weight: bold;">' + opType + '</span>';

                cellAddr.innerHTML = '<span style="font-size: 11px; font-family: monospace;">' +
                                   (notif.notificationAddress || 'N/A') + '</span>';
            });

            // Show table and status message
            listContainer.style.display = 'block';
            statusDiv.className = 'lpac-status success';
            statusDiv.innerHTML = '<strong>‚úì</strong> <%:Found%> ' + data.notifications.length + ' <%:pending notification(s)%>';
        } else if (data.success) {
            // No notifications - show empty table message
            tbody.innerHTML = '<tr><td colspan="4" style="text-align: center; color: #666; padding: 20px;"><%:No pending notifications%></td></tr>';
            listContainer.style.display = 'block';
            statusDiv.className = 'lpac-status success';
            statusDiv.innerHTML = '<strong>‚úì</strong> <%:No pending notifications%>';
        } else {
            // Error - show error message in table
            tbody.innerHTML = '<tr><td colspan="4" style="text-align: center; color: #d44; padding: 20px;"><%:Failed to load notifications%></td></tr>';
            listContainer.style.display = 'block';
            statusDiv.className = 'lpac-status error';
            statusDiv.innerHTML = '<strong>‚úó</strong> <%:Failed to list notifications:%> ' + (data.error || '<%:Unknown error%>');
        }
    });
}

// Manual Process All Notifications - COMMENTED OUT
function manualProcessNotifications() {
    var statusDiv = document.getElementById('notifications_status');
    var listContainer = document.getElementById('notifications_list_container');

    if (!confirm('<%:Process and send all pending notifications to SM-DP+ servers?%>')) {
        return;
    }

    statusDiv.className = 'lpac-status info';
    statusDiv.innerHTML = '<%:Processing all notifications, please wait...%>';
    statusDiv.style.display = 'block';

    XHR.post('<%=url("admin/network/lpac/process_notifications")%>', {
        driver: selectedDriver,
        at_device: selectedAtDevice,
        mbim_device: selectedMbimDevice,
        http_client: selectedHttpClient
    }, function(x, data) {
        if (data.success) {
            statusDiv.className = 'lpac-status success';
            if (data.count > 0) {
                statusDiv.innerHTML = '<strong>‚úì</strong> <%:Successfully processed and sent%> ' + data.count + ' <%:notification(s)%>!';
            } else {
                statusDiv.innerHTML = '<strong>‚úì</strong> <%:No notifications to process%>';
            }
            // Hide the table after processing
            listContainer.style.display = 'none';
        } else {
            statusDiv.className = 'lpac-status error';
            statusDiv.innerHTML = '<strong>‚úó</strong> <%:Failed to process notifications:%> ' + (data.error || '<%:Unknown error%>');
        }
    });
}
*/

// Refresh Modem Status
function refreshStatus() {
    var outputDiv = document.getElementById('status_output');

    outputDiv.innerHTML = '<%:Loading modem status...%>';
    outputDiv.style.display = 'block';

    var url = '<%=url("admin/network/lpac/status")%>?' +
              'driver=' + encodeURIComponent(selectedDriver) +
              '&at_device=' + encodeURIComponent(selectedAtDevice) +
              '&mbim_device=' + encodeURIComponent(selectedMbimDevice) +
              '&http_client=' + encodeURIComponent(selectedHttpClient);

    XHR.get(url, null, function(x, data) {
        if (data.success) {
            outputDiv.innerHTML = data.output || data.message || '<%:No status available%>';
        } else {
            outputDiv.innerHTML = '<span style="color: red;"><%:Failed to get modem status:%> ' + (data.error || '<%:Unknown error%>') + '</span>\n\n' +
                                 (data.output || '');
        }
    });
}

// List Installed Profiles
function listProfiles() {
    var statusDiv = document.getElementById('profiles_status');
    var outputDiv = document.getElementById('profiles_output');
    var listContainer = document.getElementById('profiles_list_container');
    var tbody = document.getElementById('profiles_tbody');

    // Reset UI
    statusDiv.className = 'lpac-status info';
    statusDiv.innerHTML = '<%:Loading installed profiles...%>';
    outputDiv.style.display = 'none';
    listContainer.style.display = 'none';

    var url = '<%=url("admin/network/lpac/list")%>?' +
              'driver=' + encodeURIComponent(selectedDriver) +
              '&at_device=' + encodeURIComponent(selectedAtDevice) +
              '&mbim_device=' + encodeURIComponent(selectedMbimDevice) +
              '&http_client=' + encodeURIComponent(selectedHttpClient);

    XHR.get(url, null, function(x, data) {
        if (data.success && data.profiles && data.profiles.length > 0) {
            // Store profiles in global variable
            installedProfiles = data.profiles;

            // Clear table
            tbody.innerHTML = '';

            // Populate table
            data.profiles.forEach(function(profile) {
                var row = tbody.insertRow();

                var cellIccid = row.insertCell(0);
                var cellNickname = row.insertCell(1);
                var cellState = row.insertCell(2);
                var cellActions = row.insertCell(3);

                cellIccid.style.fontFamily = 'monospace';
                cellIccid.innerHTML = profile.iccid || '<%:Unknown%>';

                // lpac v2.x uses profileNickname field
                var nickname = profile.profileNickname || profile.nickname || '';
                cellNickname.innerHTML = '<span class="nickname-display">' + (nickname || '<%:No alias%>') + '</span>';

                // lpac v2.x uses profileState field (enabled/disabled as strings)
                var state = profile.profileState || profile.state || 'unknown';
                var stateColor = state === 'enabled' ? 'green' :
                                 state === 'disabled' ? 'orange' : 'gray';
                cellState.innerHTML = '<span style="color: ' + stateColor + '; font-weight: bold;">' +
                                     (state || '<%:Unknown%>').toUpperCase() + '</span>';

                // Actions: Edit, Enable/Disable, and Delete buttons
                // Edit button
                var editBtn = document.createElement('button');
                editBtn.className = 'lpac-button lpac-button-secondary';
                editBtn.style.padding = '5px 10px';
                editBtn.style.fontSize = '12px';
                editBtn.style.marginRight = '5px';
                editBtn.innerHTML = '‚úèÔ∏è <%:Edit%>';
                editBtn.onclick = function() { editNickname(profile.iccid, nickname); };
                cellActions.appendChild(editBtn);

                // Enable/Disable toggle button
                var toggleBtn = document.createElement('button');
                toggleBtn.style.padding = '5px 10px';
                toggleBtn.style.fontSize = '12px';
                toggleBtn.style.marginRight = '5px';

                if (state === 'enabled') {
                    // Show disable button for enabled profiles
                    toggleBtn.className = 'lpac-button lpac-button-secondary';
                    toggleBtn.innerHTML = '‚è∏Ô∏è <%:Disable%>';
                    toggleBtn.onclick = function() { disableProfile(profile.iccid, nickname); };
                } else {
                    // Show enable button for disabled profiles
                    toggleBtn.className = 'lpac-button lpac-button-primary';
                    toggleBtn.innerHTML = '‚ñ∂Ô∏è <%:Enable%>';
                    toggleBtn.onclick = function() { enableProfile(profile.iccid, nickname); };
                }
                cellActions.appendChild(toggleBtn);

                // Delete button - only show for disabled profiles
                if (state !== 'enabled') {
                    var deleteBtn = document.createElement('button');
                    deleteBtn.className = 'lpac-button lpac-button-danger';
                    deleteBtn.style.padding = '5px 10px';
                    deleteBtn.style.fontSize = '12px';
                    deleteBtn.innerHTML = 'üóëÔ∏è <%:Delete%>';
                    deleteBtn.onclick = function() { deleteProfile(profile.iccid, nickname); };
                    cellActions.appendChild(deleteBtn);
                }
            });

            // Show table
            listContainer.style.display = 'block';
            statusDiv.className = 'lpac-status success';
            statusDiv.innerHTML = '<strong>‚úì</strong> <%:Found%> ' + data.profiles.length + ' <%:profile(s)%>';
        } else if (data.success && data.profiles && data.profiles.length === 0) {
            statusDiv.className = 'lpac-status info';
            statusDiv.innerHTML = '<%:No profiles installed on the modem%>';
            // Clear delete dropdown
            deleteSelect.innerHTML = '<option value=""><%:-- No profiles available --%></option>';
            installedProfiles = [];
        } else {
            statusDiv.className = 'lpac-status error';
            statusDiv.innerHTML = '<strong>‚úó</strong> <%:Failed to list profiles:%> ' + (data.error || '<%:Unknown error%>');
            // Clear delete dropdown
            deleteSelect.innerHTML = '<option value=""><%:-- Error loading profiles --%></option>';
            installedProfiles = [];
        }

        // Show raw output if available
        if (data.raw_output) {
            outputDiv.innerHTML = data.raw_output;
            outputDiv.style.display = 'block';
        }
    });
}

// Auto-refresh status on page load
window.addEventListener('load', function() {
    // Load device settings from UCI first
    loadDeviceSettings();

    // Auto-refresh profile list on page load
    listProfiles();

    // Auto-load pending notifications on page load - DISABLED (notifications UI commented out)
    // listNotifications();
});
</script>

<%+footer%>
